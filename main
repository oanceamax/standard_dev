import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
import numpy as np

data = [168.7,171.77,166.55,177.06,178.06,177.19,174.49,174.7,176.93,175.79,176.05,175.83,176.56,175.84,176.52,177.22,177.96,171.25,172.87,174.22,174.02,176.28,175.17,184.74,183.03,191.61,190.07,185.58,184.18,186.25,185.95,185.65]

def print_data(data_input):
  for item in data_input:
    print (item)

def data_sum(data):
  total = 0
  for item in data: 
    total += item
  return total
    
def data_average(data_input):
  sum_of_data = data_sum(data_input)
  average = sum_of_data / float(len(data_input))
  return average

def median(data):
    sorted_list = sorted(data)
    if len(sorted_list) % 2 != 0:
        #odd number of elements
        index = len(sorted_list)//2 
        return sorted_list[index]
    elif len(sorted_list) % 2 == 0:
        #even no. of elements
        index_1 = int(len(sorted_list)/2 + 1)
        index_2 = int(len(sorted_list)/2)
        mean = (sorted_list[index_1] + sorted_list[index_2])/2.0
        return mean
    
def data_variance(data):
  average = data_average(data)
  variance = 0
  for item in data:
    variance = variance +  (average - item) ** 2
  result = variance / float(len(data))
  return result

def data_std_deviation(variance):
    result = variance ** 0.5
    return result 

def data_std_err(data):
    result = data_std_deviation(data_variance(data)) / len(data)**0.5
    return result

variance = data_variance(data) 



no_sample = len(data)*2
time = np.array(range(1,no_sample, 2))
time = time.reshape(-1, 1)

line_fitter = LinearRegression()
line_fitter.fit(time, data)
data_predicted = line_fitter.predict(time)

upperband = [i+ data_std_deviation(variance) for i in data_predicted]
lowerband = [i- data_std_deviation(variance) for i in data_predicted]
# contains the slope
print ("Slope:",line_fitter.coef_)
#contains the intercept
print ("Intercept:",line_fitter.intercept_)
#Standard Deviation
print ("Standard Deviation:",data_std_deviation(variance))
#Standard Error
print ("Standard Error: ",data_std_err(data))
#Variance
print ("Variance:",data_variance(data))

plt.plot(time, data, "o")
plt.plot(time, data_predicted)
plt.plot(time, upperband)
plt.plot(time, lowerband)

plt.show()
